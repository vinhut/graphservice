// Code generated by MockGen. DO NOT EDIT.
// Source: services/kafka.go

// Package mock_services is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKafkaService is a mock of KafkaService interface
type MockKafkaService struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaServiceMockRecorder
}

// MockKafkaServiceMockRecorder is the mock recorder for MockKafkaService
type MockKafkaServiceMockRecorder struct {
	mock *MockKafkaService
}

// NewMockKafkaService creates a new mock instance
func NewMockKafkaService(ctrl *gomock.Controller) *MockKafkaService {
	mock := &MockKafkaService{ctrl: ctrl}
	mock.recorder = &MockKafkaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaService) EXPECT() *MockKafkaServiceMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockKafkaService) Send(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockKafkaServiceMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockKafkaService)(nil).Send), arg0, arg1)
}

// Read mocks base method
func (m *MockKafkaService) Read() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockKafkaServiceMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockKafkaService)(nil).Read))
}
